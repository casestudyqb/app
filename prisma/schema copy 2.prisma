generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
  author    User?   @relation(fields: [authorId], references: [id])

  @@index([authorId], name: "authorId")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String?       @unique
  password      String?
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  posts         Post[]
  segmentNotes  SegmentNote[]
  episodes      Episode[]     @relation("EpisodeParticipants")
  segments      Segment[]     @relation("SegmentCreatedBy")

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Show {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  picUrl      String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  episodes    Episode[] @relation("ShowEpisodes")
}

model Episode {
  id           Int       @id @default(autoincrement())
  episodeNum   Int
  showId       Int
  description  String?
  dateAired    String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  show         Show      @relation("ShowEpisodes", fields: [showId], references: [id])
  segments     Segment[]
  participants User[]    @relation("EpisodeParticipants")

  @@index([showId], name: "showId")
}

model Segment {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  url           String
  image         String
  starRating    Int
  draft         Boolean         @default(true)
  episodeId     Int
  segmentId     Int
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
  siteName      String          @default("SiteName")
  episode       Episode         @relation(fields: [episodeId], references: [id])
  segmentType   SegmentType     @relation(fields: [segmentId], references: [id])
  segmentNote   SegmentNote[]
  segmentPicUrl SegmentPicUrl[]
  createdBy     User[]          @relation("SegmentCreatedBy")

  @@index([episodeId], name: "episodeId")
  @@index([segmentId], name: "segmentId")
}

model SegmentType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  layout      Layout    @default(TEXT)
  segment     Segment[]
}

model SegmentNote {
  id        Int      @id @default(autoincrement())
  noteText  String
  authorId  Int
  segmentId Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  author    User     @relation(fields: [authorId], references: [id])
  segment   Segment  @relation(fields: [segmentId], references: [id])

  @@index([authorId], name: "authorId")
  @@index([segmentId], name: "segmentId")
}

model SegmentPicUrl {
  id        Int      @id @default(autoincrement())
  url       String
  segmentId Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  segment   Segment  @relation(fields: [segmentId], references: [id])

  @@index([segmentId], name: "segmentId")
}

enum Layout {
  ARTICLE
  PICTURE
  TEXT
}
