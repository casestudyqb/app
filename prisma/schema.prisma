generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Episode {
  id          Int       @id @default(autoincrement())
  episodeNum  Int
  showId      Int
  description String?
  dateAired   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  Show        Show      @relation(fields: [showId], references: [id])
  Segment     Segment[]
  users       users[]   @relation("EpisodeParticipants")

  @@index([showId], name: "showId")
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int?
  segmentId  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Segment    Segment  @relation(fields: [segmentId], references: [id])
  users      users?   @relation(fields: [userId], references: [id])
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int?
  users     users?  @relation(fields: [authorId], references: [id])

  @@index([authorId], name: "authorId")
}

model Segment {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  url           String
  image         String
  starRating    Int
  draft         Boolean         @default(true)
  episodeId     Int
  segmentId     Int
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  siteName      String          @default("SiteName")
  Episode       Episode         @relation(fields: [episodeId], references: [id])
  SegmentType   SegmentType     @relation(fields: [segmentId], references: [id])
  Like          Like[]
  SegmentNote   SegmentNote[]
  SegmentPicUrl SegmentPicUrl[]
  users         users[]         @relation("SegmentCreatedBy")

  @@index([episodeId], name: "episodeId")
  @@index([segmentId], name: "segmentId")
}

model SegmentNote {
  id         Int      @id @default(autoincrement())
  noteText   String
  authorId   Int
  segmentId  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  users      users    @relation(fields: [authorId], references: [id])
  Segment    Segment  @relation(fields: [segmentId], references: [id])

  @@index([authorId], name: "authorId")
  @@index([segmentId], name: "segmentId")
}

model SegmentPicUrl {
  id         Int      @id @default(autoincrement())
  url        String
  segmentId  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Segment    Segment  @relation(fields: [segmentId], references: [id])

  @@index([segmentId], name: "segmentId")
}

model SegmentType {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  layout      SegmentType_layout @default(TEXT)
  Segment     Segment[]
}

model Show {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  picUrl      String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  Episode     Episode[]
}

model accounts {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique
  user_id              Int
  provider_type        String
  provider_id          String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@index([provider_account_id], name: "providerAccountId")
  @@index([provider_id], name: "providerId")
  @@index([user_id], name: "userId")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime
  session_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model users {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String?       @unique
  password       String?
  email_verified DateTime?
  image          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime
  Like           Like[]
  Post           Post[]
  SegmentNote    SegmentNote[]
  Episode        Episode[]     @relation("EpisodeParticipants")
  Segment        Segment[]     @relation("SegmentCreatedBy")
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum SegmentType_layout {
  ARTICLE
  PICTURE
  TEXT
}
